# -*- coding: utf-8 -*-
"""Keywords.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n0-xA9gJNiHtLhRADkigDYXObiLDuoJ1
"""

import json
import os
import time
from google.colab import files
import zipfile
from IPython.display import clear_output

# Installation et import des d√©pendances
try:
    !pip install yake --quiet
    import yake
    print("‚úÖ YAKE install√© avec succ√®s")
except Exception as e:
    print(f"‚ùå Erreur d'installation : {str(e)}")
    raise

def show_progress(message):
    """Affiche un message de progression"""
    clear_output(wait=True)
    print(f"‚è≥ {message}...")

def upload_files():
    """G√®re l'upload des fichiers avec suivi"""
    show_progress("Pr√™t √† recevoir les fichiers")
    uploaded = files.upload()
    while not uploaded:
        show_progress("En attente de fichiers...")
        time.sleep(1)
        uploaded = files.upload()

    input_folder = '/content/input_files'
    os.makedirs(input_folder, exist_ok=True)

    for filename, content in uploaded.items():
        with open(os.path.join(input_folder, filename), 'wb') as f:
            f.write(content)
        show_progress(f"Fichier {filename} re√ßu")

    return input_folder

def process_files(input_folder):
    """Traite les fichiers avec suivi"""
    output_folder = '/content/output'
    os.makedirs(output_folder, exist_ok=True)

    file_count = len([f for f in os.listdir(input_folder) if f.endswith('.json')])
    processed = 0

    for filename in os.listdir(input_folder):
        if filename.endswith('.json'):
            try:
                show_progress(f"Traitement {processed+1}/{file_count} - {filename}")

                # Lecture
                with open(os.path.join(input_folder, filename), 'r', encoding='utf-8') as f:
                    data = json.load(f)

                # Traitement
                if isinstance(data, list):
                    for item in data:
                        process_item(item)
                else:
                    process_item(data)

                # Sauvegarde
                output_path = os.path.join(output_folder, filename)
                with open(output_path, 'w', encoding='utf-8') as f:
                    json.dump(data, f, indent=4, ensure_ascii=False)

                processed += 1

            except Exception as e:
                print(f"‚ö†Ô∏è Erreur sur {filename}: {str(e)}")
                continue

    return output_folder

def process_item(item):
    """Traite un √©l√©ment individuel"""
    text = ""
    if item.get("type") == "video":
        text = item.get("transcription", "")
    elif item.get("type") == "article":
        text = item.get("contenu", "")
    elif item.get("type") == "course":
        text = "\n".join(s.get("section", "") for s in item.get("content", []))

    if text:
        kw_extractor = yake.KeywordExtractor(lan="fr" if "√©" in text else "en", top=10)
        item["keywords"] = [kw[0] for kw in kw_extractor.extract_keywords(text)]

def create_zip(output_folder):
    """Cr√©e une archive ZIP"""
    zip_path = '/content/resultats.zip'
    with zipfile.ZipFile(zip_path, 'w') as zipf:
        for root, _, files in os.walk(output_folder):
            for file in files:
                zipf.write(os.path.join(root, file), file)
    return zip_path

def main():
    try:
        # √âtape 1: Upload
        print("üì§ Veuillez s√©lectionner vos fichiers JSON")
        input_folder = upload_files()

        # √âtape 2: Traitement
        output_folder = process_files(input_folder)

        # √âtape 3: Pr√©paration des r√©sultats
        show_progress("Pr√©paration du t√©l√©chargement")
        zip_path = create_zip(output_folder)

        # √âtape 4: T√©l√©chargement
        print("‚úÖ Traitement termin√© avec succ√®s!")
        print("‚¨áÔ∏è Le t√©l√©chargement va commencer...")
        files.download(zip_path)

    except Exception as e:
        print(f"‚ùå Erreur critique : {str(e)}")

if __name__ == "__main__":
    main()