# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1boBrcds_P7qe8mjtAYN9H6tw3STxb8HR
"""

!pip uninstall httpx -y
!pip install httpx==0.23.0
!pip install youtube-search-python
!pip install youtube-transcript-api

from youtubesearchpython import VideosSearch
from youtube_transcript_api import YouTubeTranscriptApi
import json
import uuid

def get_video_id(url):
    # Extraire l'ID de la vid√©o √† partir de l'URL YouTube
    if 'youtube.com/watch?v=' in url:
        return url.split('youtube.com/watch?v=')[1].split('&')[0]
    elif 'youtu.be/' in url:
        return url.split('youtu.be/')[1].split('?')[0]
    return None

def get_transcript(video_id):
    try:
        transcript = YouTubeTranscriptApi.get_transcript(video_id)
        return ' '.join([entry['text'] for entry in transcript])
    except Exception as e:
        print(f"‚ùå Impossible de r√©cup√©rer la transcription pour {video_id}: {e}")
        return None

def collecter_videos_multiples(domaine, mots_cles, videos_par_mot=5):
    videos_total = []
    urls_vues = set()

    for mot in mots_cles:
        print(f"üîç Recherche pour [{domaine}] : {mot}")
        search = VideosSearch(mot, limit=videos_par_mot)
        resultats = search.result()['result']

        for v in resultats:
            url = v.get("link")
            if url not in urls_vues:
                video_id = get_video_id(url)
                transcription = get_transcript(video_id) if video_id else None

                video = {
                    "id": str(uuid.uuid4()),
                    "type": "video",
                    "domaine": domaine,
                    "titre": v.get("title"),
                    "url": url,
                    "description": v.get("descriptionSnippet", [{}])[0].get("text", "") if v.get("descriptionSnippet") else "",
                    "chaine": v.get("channel", {}).get("name"),
                    "dur√©e": v.get("duration"),
                    "keywords": v.get("title").lower().split()[:5],
                    "transcription": transcription
                }
                videos_total.append(video)
                urls_vues.add(url)

    return videos_total

# üî¢ Mots-cl√©s par domaine
mots_cles_math = ["mathematics", "algebra", "geometry", "calculus", "trigonometry"]
mots_cles_science = ["physics", "chemistry", "biology", "science experiments", "geology"]
mots_cles_eng = ["mechanical engineering", "electrical circuits", "electronics", "microcontrollers", "fluid mechanics"]
mots_cles_tech = ["computer science", "artificial intelligence", "machine learning", "web development", "blockchain"]

# üì• Collecte
videos_math = collecter_videos_multiples("mathematics", mots_cles_math)
videos_science = collecter_videos_multiples("science", mots_cles_science)
videos_eng = collecter_videos_multiples("engineering", mots_cles_eng)
videos_tech = collecter_videos_multiples("technology", mots_cles_tech)

# üíæ Sauvegarde
with open("videos_mathematics.json", "w", encoding="utf-8") as f:
    json.dump(videos_math, f, indent=2, ensure_ascii=False)

with open("videos_science.json", "w", encoding="utf-8") as f:
    json.dump(videos_science, f, indent=2, ensure_ascii=False)

with open("videos_engineering.json", "w", encoding="utf-8") as f:
    json.dump(videos_eng, f, indent=2, ensure_ascii=False)

with open("videos_technology.json", "w", encoding="utf-8") as f:
    json.dump(videos_tech, f, indent=2, ensure_ascii=False)

# ‚úÖ Confirmation
print(f"‚úÖ {len(videos_math)} vid√©os enregistr√©es dans 'videos_mathematics.json'")
print(f"‚úÖ {len(videos_science)} vid√©os enregistr√©es dans 'videos_science.json'")
print(f"‚úÖ {len(videos_eng)} vid√©os enregistr√©es dans 'videos_engineering.json'")
print(f"‚úÖ {len(videos_tech)} vid√©os enregistr√©es dans 'videos_technology.json'")

# T√©l√©chargement des fichiers
from google.colab import files
files.download("videos_mathematics.json")
files.download("videos_science.json")
files.download("videos_engineering.json")
files.download("videos_technology.json")

from google.colab import files
import json

# Sauvegarder les vid√©os dans des fichiers JSON (au cas o√π vous auriez besoin de le refaire)
with open("videos_mathematics.json", "w", encoding="utf-8") as f:
    json.dump(videos_math, f, indent=2, ensure_ascii=False)

with open("videos_science.json", "w", encoding="utf-8") as f:
    json.dump(videos_science, f, indent=2, ensure_ascii=False)

with open("videos_engineering.json", "w", encoding="utf-8") as f:
    json.dump(videos_eng, f, indent=2, ensure_ascii=False)

with open("videos_technology.json", "w", encoding="utf-8") as f:
    json.dump(videos_tech, f, indent=2, ensure_ascii=False)

# T√©l√©charger les fichiers
files.download("videos_mathematics.json")
files.download("videos_science.json")
files.download("videos_engineering.json")
files.download("videos_technology.json")

print("T√©l√©chargement des fichiers JSON termin√©!")